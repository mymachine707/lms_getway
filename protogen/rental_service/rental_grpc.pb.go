// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: rental.proto

package rental_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RentalServiceClient is the client API for RentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentalServiceClient interface {
	CreateRental(ctx context.Context, in *CreateRentalRequest, opts ...grpc.CallOption) (*Rental, error)
	GetRentalList(ctx context.Context, in *GetRentalListRequest, opts ...grpc.CallOption) (*GetRentalListResponse, error)
	GetRentalById(ctx context.Context, in *GetRentalByIdRequest, opts ...grpc.CallOption) (*Rental, error)
	UpdateRental(ctx context.Context, in *UpdateRentalRequest, opts ...grpc.CallOption) (*Rental, error)
	DeleteRental(ctx context.Context, in *DeleteRentalRequest, opts ...grpc.CallOption) (*DeleteRentalResponse, error)
}

type rentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRentalServiceClient(cc grpc.ClientConnInterface) RentalServiceClient {
	return &rentalServiceClient{cc}
}

func (c *rentalServiceClient) CreateRental(ctx context.Context, in *CreateRentalRequest, opts ...grpc.CallOption) (*Rental, error) {
	out := new(Rental)
	err := c.cc.Invoke(ctx, "/RentalService/CreateRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) GetRentalList(ctx context.Context, in *GetRentalListRequest, opts ...grpc.CallOption) (*GetRentalListResponse, error) {
	out := new(GetRentalListResponse)
	err := c.cc.Invoke(ctx, "/RentalService/GetRentalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) GetRentalById(ctx context.Context, in *GetRentalByIdRequest, opts ...grpc.CallOption) (*Rental, error) {
	out := new(Rental)
	err := c.cc.Invoke(ctx, "/RentalService/GetRentalById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) UpdateRental(ctx context.Context, in *UpdateRentalRequest, opts ...grpc.CallOption) (*Rental, error) {
	out := new(Rental)
	err := c.cc.Invoke(ctx, "/RentalService/UpdateRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentalServiceClient) DeleteRental(ctx context.Context, in *DeleteRentalRequest, opts ...grpc.CallOption) (*DeleteRentalResponse, error) {
	out := new(DeleteRentalResponse)
	err := c.cc.Invoke(ctx, "/RentalService/DeleteRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentalServiceServer is the server API for RentalService service.
// All implementations must embed UnimplementedRentalServiceServer
// for forward compatibility
type RentalServiceServer interface {
	CreateRental(context.Context, *CreateRentalRequest) (*Rental, error)
	GetRentalList(context.Context, *GetRentalListRequest) (*GetRentalListResponse, error)
	GetRentalById(context.Context, *GetRentalByIdRequest) (*Rental, error)
	UpdateRental(context.Context, *UpdateRentalRequest) (*Rental, error)
	DeleteRental(context.Context, *DeleteRentalRequest) (*DeleteRentalResponse, error)
	mustEmbedUnimplementedRentalServiceServer()
}

// UnimplementedRentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRentalServiceServer struct {
}

func (UnimplementedRentalServiceServer) CreateRental(context.Context, *CreateRentalRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRental not implemented")
}
func (UnimplementedRentalServiceServer) GetRentalList(context.Context, *GetRentalListRequest) (*GetRentalListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRentalList not implemented")
}
func (UnimplementedRentalServiceServer) GetRentalById(context.Context, *GetRentalByIdRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRentalById not implemented")
}
func (UnimplementedRentalServiceServer) UpdateRental(context.Context, *UpdateRentalRequest) (*Rental, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRental not implemented")
}
func (UnimplementedRentalServiceServer) DeleteRental(context.Context, *DeleteRentalRequest) (*DeleteRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRental not implemented")
}
func (UnimplementedRentalServiceServer) mustEmbedUnimplementedRentalServiceServer() {}

// UnsafeRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentalServiceServer will
// result in compilation errors.
type UnsafeRentalServiceServer interface {
	mustEmbedUnimplementedRentalServiceServer()
}

func RegisterRentalServiceServer(s grpc.ServiceRegistrar, srv RentalServiceServer) {
	s.RegisterService(&RentalService_ServiceDesc, srv)
}

func _RentalService_CreateRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).CreateRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RentalService/CreateRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).CreateRental(ctx, req.(*CreateRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_GetRentalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentalListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).GetRentalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RentalService/GetRentalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).GetRentalList(ctx, req.(*GetRentalListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_GetRentalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentalByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).GetRentalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RentalService/GetRentalById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).GetRentalById(ctx, req.(*GetRentalByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_UpdateRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).UpdateRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RentalService/UpdateRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).UpdateRental(ctx, req.(*UpdateRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RentalService_DeleteRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentalServiceServer).DeleteRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RentalService/DeleteRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentalServiceServer).DeleteRental(ctx, req.(*DeleteRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RentalService_ServiceDesc is the grpc.ServiceDesc for RentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RentalService",
	HandlerType: (*RentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRental",
			Handler:    _RentalService_CreateRental_Handler,
		},
		{
			MethodName: "GetRentalList",
			Handler:    _RentalService_GetRentalList_Handler,
		},
		{
			MethodName: "GetRentalById",
			Handler:    _RentalService_GetRentalById_Handler,
		},
		{
			MethodName: "UpdateRental",
			Handler:    _RentalService_UpdateRental_Handler,
		},
		{
			MethodName: "DeleteRental",
			Handler:    _RentalService_DeleteRental_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rental.proto",
}
